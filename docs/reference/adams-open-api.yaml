openapi: 3.0.0
info:
  title: Adams Open API
  version: '1.0'
  description: |
    # 共通仕様
    APIを利用する際の共通仕様は以下のとおりです。

    ## リクエストヘッダ
    APIをリクエストする場合に、必要な共通リクエストヘッダはありません。

    ただし、認証が必要なAPIに関しては後述する[Authentication](#section/Authentication)のリクエストヘッダが必要です。

    ## レスポンスヘッダ
    サーバから共通して返却されるレスポンスヘッダは存在しません。

    ## ステータスコード
    | コード | 説明 |
    |:---:|---|
    | 200 | リクエストが成功しました。 |
    | 201 | リクエストが成功し、新たなリソースが作成されました。|
    | 204 | リクエストが成功しました。<br>レスポンスとして返却するコンテンツは存在しません。 |
    | 400 | リクエストの内容に問題があります。 以下のような理由が該当します。<br>- リクエストパラメータが不足している<br>- バリデーションエラーもここに該当？ |
    | 401 | 認証エラーが発生しました。 |
    | 403 | アクセス権限がありません。以下のような理由が該当します。<br>- 管理者のみがアクセス可能なリソースに一般ユーザーがアクセス<br>- GET権限のみが付与されたAPI KEYでのPOSTリクエスト |
    | 404 | リソースが存在しませんでした。以下のような理由が該当します。<br>- 対象のユーザーIDが存在していない。 |
    | 415 | サポートされていないメディア形式です。 |
    | 500 | 内部サーバのエラー |

    ## エラーレスポンス
    エラー発生時は、以下のJSONデータを含むレスポンスボディが返却されます。

    | 値 | 説明 |
    |---|---|
    | message | エラー情報を含むメッセージ。エラーメッセージの詳細は[エラーメッセージ](#section/共通仕様/エラーメッセージ) を参照してください。|
    | details[].code | エラーコード。特定の状況では返却されません。 |
    | details[].message | エラーの詳細。特定の状況では返却されません。 詳しくは、[エラーの詳細](#section/共通仕様/エラーの詳細)を参照してください。|

    ## エラーメッセージ
    エラーレスポンスの`message`プロパティに含まれる、主なメッセージは以下のとおりです。

    | ステータスコード | メッセージ | 説明 |
    |:---:|---|---|
    | 400 | Required parameter does not exist in the request body: XXX | リクエストボディに必須パラメータが存在しません。XXXの部分には不足しているパラメータが表示されます。 |
    || Invalid property is specified in the request body: XXX | リクエストボディに無効なプロパティが指定されていました。XXXの部分には、無効なプロパティ名が表示されます。 |
    | 401 | The API failed to authenticate on request | APIがリクエスト時に認証に失敗しました。 |
    | 403 | Called an API to which you do not have access rights | アクセス権限がないAPIを呼び出しました。 |
    | 404 | Not Found | リソースが取得出来ませんでした。 |
    | 415 | Content type that is not supported by the API is specified: XXX | APIでサポートされていないコンテンツタイプが指定されました。XXXの部分には指定されたコンテンツタイプが表示されます。 |

    ## エラーの詳細
    エラーレスポンスとして`details[]`プロパティに含まれる、より詳細なエラーの内容を定義します。

    ※HTTPステータスコード「500」が発生した際のエラーコード等がある場合もここに定義する。今は内部エラーの内容が思い浮かばないので、今後随時記述していく。

    | ステータスコー ド| コード | メッセージ | 説明 |
    |:---:|:---:|---|---|
    ||||
  contact:
    name: stakizawa
    email: stakizawa@anvil.ne.jp
servers:
  - url: 'http://localhost:8080/v1'
    description: devServer
    variables:
      host:
        default: localhost
      port:
        default: 8000
paths:
  /auth/signup:
    post:
      summary: サインアップ
      tags:
        - 認証
      responses:
        '200':
          $ref: '#/components/responses/200_auth_success'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
      operationId: post-auth-signup
      description: |-
        ユーザーによって入力された内容を元に、データベースにユーザーを作成し、アクセストークンを発行して返却します。

        ### 公開範囲
        | ユーザー公開 | 管理画面 |
        |:---:|:---:|
        | | ● |
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              example-1:
                value:
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                  email: user@example.com
                  created_at: '1997-07-16T19:20:30.45+01:00'
                  updated_at: '1997-07-16T19:20:30.45+01:00'
  /auth/signin:
    post:
      summary: サインイン
      tags:
        - 認証
      responses:
        '200':
          $ref: '#/components/responses/200_auth_success'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      operationId: post-auth-signin
      description: |-
        ユーザー情報を元に認証処理をして、成功したらアクセストークンを発行して返却します。

        ### 公開範囲
        | ユーザー公開 | 管理画面 |
        |:---:|:---:|
        | | ● |
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              example-1:
                $ref: '#/components/examples/user-auth-input'
        description: ''
      parameters: []
    parameters: []
  /auth/signout:
    delete:
      summary: サインアウト
      tags:
        - 認証
      responses:
        '200':
          description: OK
          headers:
            'Set-Cookie: access_token':
              schema:
                type: string
                example: access_token=""; Path=/; Domain=localhost; Max-Age=0; HttpOnly;SameSite=Strict;
              description: JWTの削除
            'Set-Cookie: isAuthenticated':
              schema:
                type: string
                example: isAuthenticated=""; Path=/; Domain=localhost; Max-Age=0; SameSite=Strict;
              description: 認証フラグの削除
        '500':
          $ref: '#/components/responses/500'
      operationId: delete-auth-signout
      description: サインアウトをした際に、Cookieから認証情報を削除します。
      security:
        - JWT: []
  /users:
    get:
      summary: ユーザー一覧を取得
      tags:
        - ユーザー
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              examples:
                example-1:
                  value:
                    - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                      email: user@example.com
                      created_at: '1997-07-16T19:20:30.45+01:00'
                      updated_at: '1997-07-16T19:20:30.45+01:00'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      operationId: get-users
      description: |-
        当システムを利用している全ユーザーを取得します。

        ### 公開範囲
        | ユーザー公開 | 管理画面 |
        |:---:|:---:|
        | | |

        > 今のところ使用予定なし
      parameters: []
      x-internal: false
      security:
        - JWT: []
  '/users/{user_id}':
    parameters:
      - $ref: '#/components/parameters/user_id'
    get:
      summary: ユーザー情報の取得
      tags:
        - ユーザー
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples: {}
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      operationId: get-users-user_id
      description: |-
        ユーザーIDに紐づくユーザー情報を取得します。

        ### 公開範囲
        | ユーザー公開 | 管理画面 |
        |:---:|:---:|
        | | |

        > 今のところ使用予定なし
      security:
        - JWT: []
    patch:
      summary: ユーザー情報の更新
      tags:
        - ユーザー
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                example-1:
                  value:
                    id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                    email: user@example.com
                    created_at: '1997-07-16T19:20:30.45+01:00'
                    updated_at: '1997-07-16T19:20:30.45+01:00'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      operationId: patch-users-user_id
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
            examples:
              example-1:
                $ref: '#/components/examples/user-auth-input'
      description: |-
        ユーザーIDに紐づくユーザー情報を更新します。

        ### 公開範囲
        | ユーザー公開 | 管理画面 |
        |:---:|:---:|
        | | ● |
      parameters: []
      security:
        - JWT: []
    delete:
      summary: ユーザーの削除
      tags:
        - ユーザー
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      operationId: delete-users-user_id
      description: |-
        ユーザー退会時に呼び出すAPI。成功時は、Cookieの情報も一緒に削除する。

        ### 公開範囲
        | ユーザー公開 | 管理画面 |
        |:---:|:---:|
        | | ● |
      security:
        - JWT: []
  /spaces:
    get:
      summary: スペース一覧を取得
      tags:
        - スペース
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Space'
              examples:
                example-1:
                  value:
                    - id: example-space
                      name: Example Space
                      description: スペースの説明文を記載
                      created_at: '1997-07-16T19:20:30.45+01:00'
                      updated_at: '1997-07-16T19:20:30.45+01:00'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      operationId: get-spaces
      description: |-
        ユーザーに紐づくスペースの一覧を取得します。

        ### 公開範囲
        | ユーザー公開 | 管理画面 |
        |:---:|:---:|
        | ● | ● |

        ### ユーザーの特定方法について
        リクエストヘッダーにのっかってきたTokenからユーザーを特定する予定(出来るかは要調査が必要)
        無理ならクエリパラメータにユーザー情報をのせる
      security:
        - API Key: []
        - JWT: []
    parameters: []
    post:
      summary: スペースの作成
      operationId: post-spaces
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Space'
              examples:
                example-1:
                  value:
                    id: example-space
                    name: Example Space
                    description: スペースの説明文を記載
                    created_at: '1997-07-16T19:20:30.45+01:00'
                    updated_at: '1997-07-16T19:20:30.45+01:00'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
      description: |-
        スペースを新規作成します。

        ### 公開範囲
        | ユーザー公開 | 管理画面 |
        |:---:|:---:|
        | ● | ● |
      security:
        - API Key: []
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Space'
            examples:
              example-1:
                value:
                  id: string
                  name: string
                  description: string
      tags:
        - スペース
  '/spaces/{space_id}':
    parameters:
      - $ref: '#/components/parameters/space_id'
    get:
      summary: スペース情報を取得
      tags:
        - スペース
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Space'
              examples:
                example-1:
                  value:
                    id: example-space
                    name: Example Space
                    description: スペースの説明文を記載
                    created_at: '1997-07-16T19:20:30.45+01:00'
                    updated_at: '1997-07-16T19:20:30.45+01:00'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      operationId: get-spaces-space_id
      description: |-
        スペースIDに紐づくスペース情報を取得します。

        ### 公開範囲
        | ユーザー公開 | 管理画面 |
        |:---:|:---:|
        | ● | ● |
      security:
        - API Key: []
        - JWT: []
    patch:
      summary: スペース情報の更新
      tags:
        - スペース
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Space'
              examples:
                example-1:
                  value:
                    id: example-space
                    name: Example Space
                    description: スペースの説明文を記載
                    created_at: '1997-07-16T19:20:30.45+01:00'
                    updated_at: '1997-07-16T19:20:30.45+01:00'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      operationId: patch-spaces-space_id
      description: |-
        スペースIDに紐づくスペースの情報を更新します。

        ### 公開範囲
        | ユーザー公開 | 管理画面 |
        |:---:|:---:|
        | ● | ● |
      security:
        - API Key: []
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                name:
                  type: string
                description:
                  type: string
            examples:
              example-1:
                value:
                  id: example-space
                  name: Example Space
                  description: スペースの説明文を記載
        description: ''
    delete:
      summary: スペースの削除
      tags:
        - スペース
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      operationId: delete-spaces-space_id
      description: |-
        スペースIDに紐づくスペースを削除します。

        ### 公開範囲
        | ユーザー公開 | 管理画面 |
        |:---:|:---:|
        | ● | ● |
      security:
        - API Key: []
        - JWT: []
  '/spaces/{space_id}/content_models':
    get:
      summary: コンテンツモデル一覧を取得
      tags:
        - コンテンツモデル
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContentModel'
              examples:
                example-1:
                  value:
                    - id: article
                      name: 記事
                      description: string
                      created_at: '1997-07-16T19:20:30.45+01:00'
                      updated_at: '1997-07-16T19:20:30.45+01:00'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      operationId: get-content-models
      description: |-
        スペース内のコンテンツモデル一覧を取得します。

        ### 公開範囲
        | ユーザー公開 | 管理画面 |
        |:---:|:---:|
        | ● | ● |
      security:
        - API Key: []
        - JWT: []
    parameters:
      - name: space_id
        in: path
        required: true
        schema:
          type: string
        description: システム内の一意のスペースID
    post:
      summary: コンテンツモデルの作成
      operationId: post-spaces-space_id-content-models
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentModel'
              examples:
                example-1:
                  value:
                    id: article
                    name: 記事
                    description: string
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      description: |-
        スペース内にコンテンツモデルを作成します。

        ### 公開範囲
        | ユーザー公開 | 管理画面 |
        |:---:|:---:|
        | ● | ● |
      tags:
        - コンテンツモデル
      security:
        - API Key: []
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentModel'
            examples:
              example-1:
                value:
                  id: article
                  name: 記事
                  description: string
                  created_at: '1997-07-16T19:20:30.45+01:00'
                  updated_at: '1997-07-16T19:20:30.45+01:00'
  '/spaces/{space_id}/content_models/{content_model_id}':
    parameters:
      - name: space_id
        in: path
        required: true
        schema:
          type: string
        description: システム内の一意のスペースID
      - name: content_model_id
        in: path
        required: true
        schema:
          type: string
        description: スペース内の一意のコンテンツモデルID
    get:
      summary: コンテンツモデル情報を取得
      tags:
        - コンテンツモデル
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentModel'
              examples:
                example-1:
                  value:
                    id: article
                    name: 記事
                    description: string
                    created_at: '1997-07-16T19:20:30.45+01:00'
                    updated_at: '1997-07-16T19:20:30.45+01:00'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      operationId: get-content-models-content_model_id
      description: |-
        スペース内のコンテンツモデルIDに紐づく、コンテンツモデルの情報を取得します。

        ### 公開範囲
        | ユーザー公開 | 管理画面 |
        |:---:|:---:|
        | ● | ● |
      security:
        - API Key: []
        - JWT: []
    patch:
      summary: コンテンツモデル情報の更新
      tags:
        - コンテンツモデル
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentModel'
              examples:
                example-1:
                  value:
                    id: article
                    name: 記事
                    description: string
                    created_at: '1997-07-16T19:20:30.45+01:00'
                    updated_at: '1997-07-16T19:20:30.45+01:00'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      operationId: patch-content-models-content_model_id
      description: |-
        スペース内のコンテンツモデルIDい紐づく、コンテンツモデルの情報を更新します。

        ### 公開範囲
        | ユーザー公開 | 管理画面 |
        |:---:|:---:|
        | ● | ● |
      security:
        - API Key: []
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                name:
                  type: string
                description:
                  type: string
            examples:
              example-1:
                value:
                  id: article
                  name: 記事
                  description: string
    delete:
      summary: コンテンツモデルの削除
      tags:
        - コンテンツモデル
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      operationId: delete-content-models-content_model_id
      description: |-
        スペース内のコンテンツモデルIDに紐づく、コンテンツモデルを削除します。

        ### 公開範囲
        | ユーザー公開 | 管理画面 |
        |:---:|:---:|
        | ● | ● |
      security:
        - API Key: []
        - JWT: []
  '/spaces/{space_id}/content_models/{content_model_id}/content_fields':
    parameters:
      - $ref: '#/components/parameters/space_id'
      - $ref: '#/components/parameters/content_model_id'
    get:
      summary: コンテンツフィールド一覧を取得
      tags:
        - コンテンツフィールド
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContentField'
              examples:
                example-1:
                  value:
                    - id: title
                      name: タイトル
                      type: 0
                      description: string
                      created_at: '1997-07-16T19:20:30.45+01:00'
                      updated_at: '1997-07-16T19:20:30.45+01:00'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      operationId: get-spaces-space_id-content_models-content_model_id-content_fields
      description: |-
        コンテンツモデル内のコンテンツフィールド一覧を取得します。

        ### 公開範囲
        | ユーザー公開 | 管理画面 |
        |:---:|:---:|
        | ● | ● |
      security:
        - API Key: []
        - JWT: []
    post:
      summary: コンテンツフィールドの作成
      operationId: post-spaces-space_id-content_models-content_model_id-content_fields
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentField'
              examples:
                example-1:
                  value:
                    id: title
                    name: タイトル
                    type: 0
                    description: string
                    created_at: '1997-07-16T19:20:30.45+01:00'
                    updated_at: '1997-07-16T19:20:30.45+01:00'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - コンテンツフィールド
      description: |-
        コンテンツモデル内に、コンテンツフィールドを新規作成します。

        ### 公開範囲
        | ユーザー公開 | 管理画面 |
        |:---:|:---:|
        | ● | ● |
      security:
        - API Key: []
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentField'
            examples:
              example-1:
                value:
                  id: title
                  name: タイトル
                  type: 0
                  description: string
  '/spaces/{space_id}/content_models/{content_id}/content_fields/{content_field_id}':
    parameters:
      - $ref: '#/components/parameters/space_id'
      - $ref: '#/components/parameters/content_id'
      - $ref: '#/components/parameters/content_field_id'
    get:
      summary: コンテンツフィールド情報を取得
      tags:
        - コンテンツフィールド
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentField'
              examples:
                example-1:
                  value:
                    id: title
                    name: タイトル
                    type: 0
                    description: string
                    created_at: '1997-07-16T19:20:30.45+01:00'
                    updated_at: '1997-07-16T19:20:30.45+01:00'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      operationId: get-spaces-space_id-content_models-content_id-content_fields-content_field_id
      description: |-
        コンテンツモデル内のコンテンツフィールドIDに紐づく、コンテンツフィールドの情報を取得します。

        ### 公開範囲
        | ユーザー公開 | 管理画面 |
        |:---:|:---:|
        | ● | ● |
      security:
        - API Key: []
        - JWT: []
    patch:
      summary: コンテンツフィールドの更新
      operationId: patch-spaces-space_id-content_models-content_id-content_fields-content_field_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentField'
              examples:
                example-1:
                  value:
                    id: title
                    name: タイトル
                    type: 0
                    description: string
                    created_at: '1997-07-16T19:20:30.45+01:00'
                    updated_at: '1997-07-16T19:20:30.45+01:00'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - コンテンツフィールド
      description: |-
        コンテンツモデル内のコンテンツフィールドIDに紐づく、コンテンツフィールドを更新します。

        ### 公開範囲
        | ユーザー公開 | 管理画面 |
        |:---:|:---:|
        | ● | ● |
      security:
        - API Key: []
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                name:
                  type: string
                type:
                  type: integer
                  enum:
                    - 0
                    - 1
                    - 2
                description:
                  type: string
            examples:
              example-1:
                value:
                  id: title
                  name: タイトル
                  type: 0
                  description: string
    delete:
      summary: コンテンツフィールドの削除
      operationId: delete-spaces-space_id-content_models-content_id-content_fields-content_field_id
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - コンテンツフィールド
      description: |-
        コンテンツモデル内のコンテンツフィールドIDに紐づく、コンテンツフィールドを削除します。

        ### 公開範囲
        | ユーザー公開 | 管理画面 |
        |:---:|:---:|
        | ● | ● |
      security:
        - API Key: []
        - JWT: []
  '/spaces/{space_id}/content_models/{content_model_id}/contents':
    parameters:
      - $ref: '#/components/parameters/space_id'
      - $ref: '#/components/parameters/content_model_id'
    get:
      summary: コンテンツ一覧を取得
      tags:
        - コンテンツ
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    description: コンテンツの総数
                  limit:
                    type: integer
                    description: 取得件数
                    default: 10
                  skip:
                    type: integer
                    description: 何件目から取得されたか
                    default: 0
                  items:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                              readOnly: true
                        - $ref: '#/components/schemas/Timestamp'
                required:
                  - total
                  - limit
                  - skip
                  - items
              examples:
                example-1:
                  value:
                    total: 0
                    limit: 0
                    skip: 0
                    items:
                      - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                        title: string
                        content: string
                        created_at: '1997-07-16T19:20:30.45+01:00'
                        updated_at: '1997-07-16T19:20:30.45+01:00'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      operationId: get-spaces-space_id-content_models-content_model_id-contents
      description: |-
        スペースのコンテンツモデルIDに紐づく、コンテンツ一覧を取得します。

        ### 公開範囲
        | ユーザー公開 | 管理画面 |
        |:---:|:---:|
        | ● | ● |
      security:
        - API Key: []
        - JWT: []
      parameters:
        - schema:
            type: integer
            default: 10
          in: query
          name: limit
          description: 取得件数
        - schema:
            type: integer
            default: '0'
          in: query
          name: skip
          description: 何件目から取得するか
        - schema:
            type: string
            example: '昇順 : created_at 降順 : -created_at'
          in: query
          name: orders
          description: 取得するコンテンツの並び順
        - schema:
            type: boolean
            default: 'false'
          in: query
          name: includesDraft
          description: 下書きを含めるか
    post:
      summary: コンテンツを作成
      operationId: post-spaces-space_id-content_models-content_model_id-contents
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                    required:
                      - id
                  - $ref: '#/components/schemas/Timestamp'
              examples:
                example-1:
                  value:
                    id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                    created_at: '1997-07-16T19:20:30.45+01:00'
                    updated_at: '1997-07-16T19:20:30.45+01:00'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - コンテンツ
      description: |-
        スペース内のコンテンツモデルIDに紐づく、コンテンツモデルにコンテンツを新規作成します。

        ### 公開範囲
        | ユーザー公開 | 管理画面 |
        |:---:|:---:|
        | ● | ● |
      security:
        - API Key: []
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
            examples:
              example-1:
                value:
                  title: sample content title
                  content: sample content message
        description: リクエストボディは、ユーザーが任意で設定したコンテンツフィールドによるためここでは定義しない
  '/spaces/{space_id}/content_models/{content_model_id}/contents/{content_id}':
    parameters:
      - $ref: '#/components/parameters/space_id'
      - $ref: '#/components/parameters/content_model_id'
      - $ref: '#/components/parameters/content_id'
    get:
      summary: コンテンツ情報を取得
      tags:
        - コンテンツ
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                    required:
                      - id
                  - $ref: '#/components/schemas/Timestamp'
              examples:
                example-1:
                  value:
                    id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                    created_at: '1997-07-16T19:20:30.45+01:00'
                    updated_at: '1997-07-16T19:20:30.45+01:00'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      operationId: get-spaces-space_id-content_models-content_model_id-contents-content_id
      description: |-
        コンテンツIDに紐づく、コンテンツの情報を取得します。

        ### 公開範囲
        | ユーザー公開 | 管理画面 |
        |:---:|:---:|
        | ● | ● |
      security:
        - API Key: []
        - JWT: []
    patch:
      summary: コンテンツの更新
      operationId: patch-spaces-space_id-content_models-content_model_id-contents-content_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                    required:
                      - id
                  - $ref: '#/components/schemas/Timestamp'
              examples:
                example-1:
                  value:
                    id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                    title: string
                    content: string
                    created_at: '1997-07-16T19:20:30.45+01:00'
                    updated_at: '1997-07-16T19:20:30.45+01:00'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - コンテンツ
      description: |-
        コンテンツIDに紐づく、コンテンツの情報を更新します。

        ### 公開範囲
        | ユーザー公開 | 管理画面 |
        |:---:|:---:|
        | ● | ● |
      security:
        - API Key: []
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
            examples:
              example-1:
                value:
                  title: sample content change title
        description: リクエストボディは、ユーザーが任意で設定したコンテンツフィールドによるためここでは定義しない
    delete:
      summary: コンテンツを削除
      operationId: delete-spaces-space_id-content_models-content_model_id-contents-content_id
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - コンテンツ
      description: |-
        コンテンツIDに紐づく、コンテンツを削除します。

        ### 公開範囲
        | ユーザー公開 | 管理画面 |
        |:---:|:---:|
        | ● | ● |
      security:
        - API Key: []
        - JWT: []
  '/spaces/{space_id}/api_keys':
    parameters:
      - $ref: '#/components/parameters/space_id'
    get:
      summary: API Key一覧を取得
      tags:
        - API Key
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiKey'
              examples:
                example-1:
                  value:
                    - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                      type:
                        - 0
                      key: 543h25ui42307c5n43298c534y285c0nyp43h5982c347nc584250cpn
                      created_at: '1997-07-16T19:20:30.45+01:00'
                      updated_at: '1997-07-16T19:20:30.45+01:00'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          description: Internal Server Error
      operationId: get-spaces-space_id-api_keys
      description: |-
        スペース内のAPI Key一覧を取得します。

        ### 公開範囲
        | ユーザー公開 | 管理画面 |
        |:---:|:---:|
        | | ● |
      security:
        - JWT: []
    post:
      summary: API Keyを発行
      operationId: post-spaces-space_id-api_keys
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
              examples:
                example-1:
                  value:
                    id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                    type:
                      - 0
                    key: 543h25ui42307c5n43298c534y285c0nyp43h5982c347nc584250cpn
                    created_at: '1997-07-16T19:20:30.45+01:00'
                    updated_at: '1997-07-16T19:20:30.45+01:00'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - API Key
      description: |-
        スペース内に新規でAPI Keyを発行します。

        ### 公開範囲
        | ユーザー公開 | 管理画面 |
        |:---:|:---:|
        | | ● |
      security:
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKey'
            examples:
              example-1:
                value:
                  type:
                    - 0
  '/spaces/{space_id}/api_keys/{api_key_id}':
    parameters:
      - $ref: '#/components/parameters/space_id'
      - $ref: '#/components/parameters/api_key_id'
    delete:
      summary: API Keyを削除
      tags:
        - API Key
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      operationId: delete-spaces-space_id-api_keys-api_key_id
      description: |-
        スペース内で発行したAPI Keyを削除します。

        ### 公開範囲
        | ユーザー公開 | 管理画面 |
        |:---:|:---:|
        | | ● |
      security:
        - JWT: []
components:
  responses:
    '400':
      description: 'リクエストに問題がある場合のレスポンス。`message`プロパティはエラーの内容によって変更される。詳細なエラーメッセージの内容は、[エラーメッセージ](#section/共通仕様/エラーメッセージ)を参照。'
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: エラーメッセージの内容
                example: 'Required parameter does not exist in the request body: XXX'
            required:
              - message
          examples:
            example-1:
              value:
                message: 'Required parameter does not exist in the request body: XXX'
      headers: {}
    '401':
      description: |-
        API呼び出し時に認証に失敗しました。失敗の理由は以下の可能性が考えれれます。

        - サインイン時のメールアドレス・パスワードの不一致による認証失敗
        - 管理画面でのJWT認証失敗
        - API KEYによる認証失敗
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: The API failed to authenticate on request
                description: エラーメッセージ
            required:
              - message
          examples:
            example-1:
              value:
                message: The API failed to authenticate on request
    '403':
      description: アクセス権限がないAPIの呼び出し。
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Called an API to which you do not have access rights\t"
                description: エラーメッセージ
            required:
              - message
    '404':
      description: リソースが存在しない。
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Not Found
                description: エラーメッセージ
            required:
              - message
          examples:
            example-1:
              value:
                message: リソースが存在しません。
    '500':
      description: 内部サーバエラー。具体的なエラーの詳細は随時追加予定。
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: エラーメッセージ
              details:
                type: array
                description: 詳細なエラーが存在する場合は返却する
                items:
                  type: object
                  description: 詳細なエラーの内容
                  properties:
                    code:
                      type: string
                      description: システム内で独自定義したエラーコード
                    message:
                      type: string
                      description: 詳細なエラーメッセージ
            required:
              - message
    200_auth_success:
      description: 認証成功時のレスポンス
      content:
        application/json:
          schema:
            type: object
            properties:
              user:
                $ref: '#/components/schemas/User'
              token:
                type: string
                description: JWT
            required:
              - user
              - token
          examples:
            example-1:
              value:
                user:
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                  email: user@example.com
                  created_at: '1997-07-16T19:20:30.45+01:00'
                  updated_at: '1997-07-16T19:20:30.45+01:00'
                token: string
      headers:
        'Set-Cookie: access_token':
          schema:
            type: string
            example: access_token=JWT; Path=/; Domain=localhost; Max-Age=3600; HttpOnly;SameSite=Strict;
          description: JWT
        'Set-Cookie: isAuthenticated':
          schema:
            type: string
            example: isAuthenticated=ture; Path=/; Domain=localhost; Max-Age=3600; SameSite=Strict;
          description: 認証フラグ
  securitySchemes:
    API Key:
      name: X-ADAMS-APIKEY
      type: apiKey
      in: header
    JWT:
      name: access_token
      type: apiKey
      in: cookie
    Bearer:
      type: http
      scheme: bearer
  parameters:
    user_id:
      name: user_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: システム内の一意のユーザーID
    space_id:
      name: space_id
      in: path
      required: true
      schema:
        type: string
      description: システム内の一意のスペースID
    content_model_id:
      name: content_model_id
      in: path
      required: true
      schema:
        type: string
      description: スペース内の一意のコンテンツモデルID
    content_field_id:
      name: content_field_id
      in: path
      required: true
      schema:
        type: string
      description: コンテンツモデル内の一意のコンテンツフィールドID
    content_id:
      name: content_id
      in: path
      required: true
      schema:
        type: string
      description: コンテンツモデル内の一意のコンテンツID
    api_key_id:
      name: api_key_id
      in: path
      required: true
      schema:
        type: string
      description: スペース内の一意のAPI Key ID
  requestBodies: {}
  examples:
    user-auth-input:
      value:
        email: user@example.com
        password: password1234
  schemas:
    User:
      title: User
      x-tags:
        - user
      description: 当システム利用者のユーザーを表すモデルです。
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
              description: システム内の一意のユーザーID
              readOnly: true
            email:
              type: string
              format: email
            password:
              type: string
              format: password
              writeOnly: true
          required:
            - email
            - password
        - $ref: '#/components/schemas/Timestamp'
      x-examples:
        example-1:
          id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          email: user@example.com
          created_at: '1997-07-16T19:20:30.45+01:00'
          updated_at: '1997-07-16T19:20:30.45+01:00'
    Timestamp:
      title: Timestamp
      type: object
      description: 各モデル共通の日付を表すモデルです。
      properties:
        created_at:
          type: string
          format: date
          example: '1997-07-16T19:20:30.45+01:00'
          readOnly: true
        updated_at:
          type: string
          format: date
          example: '1997-07-16T19:20:30.45+01:00'
          readOnly: true
    Space:
      title: Space
      description: スペースを表すモデルです。
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: システム内で一意のスペースID
            name:
              type: string
              description: 管理画面上での表示名
            description:
              type: string
          required:
            - id
            - name
        - $ref: '#/components/schemas/Timestamp'
      x-tags:
        - space
    Role:
      title: Role
      x-tags:
        - role
      description: ロールを表すモデルです。
      allOf:
        - type: object
          properties:
            id:
              type: integer
              description: 当システム内で一意のロールID
            permission:
              type: integer
              description: ロールタイプを表す
          required:
            - id
            - permission
        - $ref: '#/components/schemas/Timestamp'
    ContentModel:
      title: Content Model
      x-tags:
        - content-model
      description: コンテンツモデルを表すモデルです。
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: スペース内で一意のコンテンツモデルID
            name:
              type: string
              description: 管理画面上での表示名
            description:
              type: string
          required:
            - id
            - name
        - $ref: '#/components/schemas/Timestamp'
    ContentField:
      title: Content Field
      description: コンテンツフィールドを表すモデルです。
      x-tags:
        - content-field
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: コンテンツモデル内の一意のコンテンツフィールドID
            name:
              type: string
              description: 管理画面上での表示名
            type:
              type: integer
              description: |-
                フィールドの入力タイプを表す。

                | 形式 | 対応種別 |
                | --- | --- |
                | 文字列 | 0 |
                | 数値 | 1 |
                | 画像 | 2 |
              enum:
                - 0
                - 1
                - 2
            description:
              type: string
          required:
            - id
            - name
            - type
        - $ref: '#/components/schemas/Timestamp'
    ApiKey:
      title: ApiKey
      description: API Keyの情報を表すモデルです。
      x-tags:
        - api-key
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
              readOnly: true
            type:
              type: array
              uniqueItems: true
              description: |-
                API Keyのタイプ
                一度発行したらタイプの変更不可

                | タイプ | HTTP Method |
                |---|---|
                | 0 | GET |
                | 1 | POST |
                | 2 | PUT |
                | 3 | PATCH |
                | 4 | DELETE |
              items:
                type: integer
                enum:
                  - 0
                  - 1
                  - 2
                  - 3
                  - 4
            key:
              type: string
              readOnly: true
        - $ref: '#/components/schemas/Timestamp'
